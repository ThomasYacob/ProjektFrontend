# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3.7'

# Define services
services:
  # # App backend service
  app-server:
    
    # Configuration for building the docker image for the backend service
    build:
      context: ./ProjektBackend # Use an image built from the specified dockerfile in the `ProjektBackend` directory.
      dockerfile: Dockerfile
    hostname: serverJavaSpring
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment:
      # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/giesecke&devrient?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: Admin123.
    networks:
      # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service
  app-client:
    hostname: clientProjekt
    build:
      context: ./ProjektFrontend # Use an image built from the specified dockerfile in the `ProjektFrontend` directory.
      dockerfile: Dockerfile
    ports:
      - "8081:80" # Map the exposed port 80 on the container to port 8081 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend
      - backend

  # Database Service (Mysql)
  db:
    image: mysql:8.0
    container_name: db
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
    restart: always
    volumes:
      - "sqlData:/var/lib/mysql"
    ports:
      - "3346:3306"
    environment:
      MYSQL_DATABASE: giesecke&devrient
      MYSQL_USER: admin
      MYSQL_PASSWORD: Admin123.
      MYSQL_ROOT_PASSWORD: root
    networks:
      - backend

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
volumes:
  sqlData:
